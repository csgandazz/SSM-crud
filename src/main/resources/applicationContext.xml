<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	<!-- spring的配置文件，这里主要跟逻辑业务有关 -->
	<!-- 配置在src/main/resources里面。classpath有关的都配置在src下 -->
	<!-- 有web.xml加载，<context-param>标签加载 -->
	
	<!-- 引入spring的组件扫描，跟springMVC一样 -->
	<!-- 但是跟springMVC不同的是，springMVC只引入@Controller组件，spring则相反-->
	<context:component-scan base-package="com.gec">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 配置数据源 -->
	<!-- 需要引入外部文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties"/>
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
			<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
			<property name="driverClass" value="${jdbc.driverClass}"></property>
			<property name="user" value="${jdbc.user}"></property>
			<property name="password" value="${jdbc.password}"></property>
	</bean>
	
<!-- ========================================mybatis整合======================================== -->
	
	<!-- 配置sqlSessionFactory -->
	<!-- 需要mybatis相关部分（mapper，dataSource,mybatis的config.xml） -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入（指定）mybatis的全局配置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<!--  注入数据源-->
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis的映射地址 -->
		<!-- *表示所有的xml文件 -->
		<property name="mapperLocations"  value="classpath:mapper/*.xml"></property>
	</bean>
	
	<!-- 配置扫描器，扫描mybatis接口，将接口加入到ioc容器中 -->
	<!-- 接口在com/gec/crud/dao 下-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 扫描dao下所有的mybatis接口 -->
		<property name="basePackage"  value="com.gec.crud.dao"></property>
	</bean>
	
<!-- =================================================================================== -->
	
<!-- ================================事务控制的配置 ===============================-->
	<!-- 配置数据源 -->
	<!-- 这个id可以任意取名 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<!-- 需要依赖数据源 -->
			<property name="dataSource" ref="pooledDataSource"></property>
	</bean>
	
	<!-- 配置一个可以执行批量的sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
	</bean>
	<!-- 开启基于注解的事务，使用xml配置形式的事务（都是使用这个配置的） -->
	<aop:config>
		<!-- 切入点表达式 ，固定写法-->
		<!-- ..表示支持子包，*表示所有，第二个表示方法任意多-->
		<aop:pointcut expression="execution(*  com.gec.crud.service..*(..))" id="txpoint"/>
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txpoint"/>
	</aop:config>
	
	<!-- 配置事务增强，事务如何切入 -->
	<tx:advice id="txAdvice">
			<tx:attributes>
				<!-- *表示切入点切入的所有方法都是事务方法 -->
				<tx:method name="*"/>
				<!-- 以get开头的所有方法，后面的属性表示可以调优 -->
				<tx:method name="get*" read-only="true"/>
			</tx:attributes>
	</tx:advice>
</beans>